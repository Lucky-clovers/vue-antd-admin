{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\src\\layouts\\tabs\\TabsView.vue?vue&type=style&index=0&id=012d64c5&scoped=true&lang=less&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\src\\layouts\\tabs\\TabsView.vue","mtime":1600420862378},{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":1600423579214},{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1600423579954},{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1600340105259},{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\less-loader\\dist\\cjs.js","mtime":1600423583243},{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\style-resources-loader\\lib\\index.js","mtime":1600423583376},{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1600423573509},{"path":"C:\\Users\\Administrator\\Desktop\\vue-antd-admin\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1600423579954}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50YWJzLXZpZXd7CiAgbWFyZ2luOiAtMTZweCBhdXRvIDhweDsKICAmLmhlYWQuZml4ZWR7CiAgICBtYXgtd2lkdGg6IDE0MDBweDsKICB9Cn0KLnRhYnMtdmlldy1jb250ZW50ewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQo="},{"version":3,"sources":["TabsView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TabsView.vue","sourceRoot":"src/layouts/tabs","sourcesContent":["<template>\r\n  <admin-layout>\r\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" @select=\"onMenuSelect\" />\r\n    <a-tabs\r\n      v-if=\"multiPage\"\r\n      type=\"editable-card\"\r\n      :active-key=\"activePage\"\r\n      :class=\"['tabs-view', layout, pageWidth]\"\r\n      :hide-add=\"true\"\r\n      @change=\"changePage\"\r\n      @edit=\"editPage\"\r\n      @contextmenu=\"onContextmenu\"\r\n    >\r\n      <a-tab-pane :key=\"page.fullPath\" v-for=\"page in pageList\">\r\n        <span slot=\"tab\" :pagekey=\"page.fullPath\">{{pageName(page)}}</span>\r\n      </a-tab-pane>\r\n    </a-tabs>\r\n    <div class=\"tabs-view-content\" :style=\"`margin-top: ${multiPage ? -24 : 0}px`\">\r\n      <page-toggle-transition :disabled=\"animate.disabled\" :animate=\"animate.name\" :direction=\"animate.direction\">\r\n        <a-keep-alive v-if=\"multiPage\" v-model=\"clearCaches\">\r\n          <router-view ref=\"tabContent\" :key=\"$route.fullPath\" />\r\n        </a-keep-alive>\r\n        <router-view v-else />\r\n      </page-toggle-transition>\r\n    </div>\r\n  </admin-layout>\r\n</template>\r\n\r\n<script>\r\nimport AdminLayout from '@/layouts/AdminLayout'\r\nimport Contextmenu from '@/components/menu/Contextmenu'\r\nimport PageToggleTransition from '@/components/transition/PageToggleTransition'\r\nimport {mapState, mapMutations} from 'vuex'\r\nimport {getI18nKey} from '@/utils/routerUtil'\r\nimport AKeepAlive from '@/components/cache/AKeepAlive'\r\n\r\nexport default {\r\n  name: 'TabsView',\r\n  i18n: require('./i18n'),\r\n  components: { PageToggleTransition, Contextmenu, AdminLayout , AKeepAlive },\r\n  data () {\r\n    return {\r\n      clearCaches: [],\r\n      pageList: [],\r\n      cachedKeys: [],\r\n      activePage: '',\r\n      menuVisible: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState('setting', ['multiPage', 'animate', 'layout', 'pageWidth']),\r\n    menuItemList() {\r\n      return [\r\n        { key: '1', icon: 'vertical-right', text: this.$t('closeLeft') },\r\n        { key: '2', icon: 'vertical-left', text: this.$t('closeRight') },\r\n        { key: '3', icon: 'close', text: this.$t('closeOthers') }\r\n      ]\r\n    },\r\n    tabsOffset() {\r\n      return this.multiPage ? 24 : 0\r\n    }\r\n  },\r\n  created () {\r\n    const route = this.$route\r\n    this.pageList.push(route)\r\n    this.activePage = route.fullPath\r\n    if (this.multiPage) {\r\n      window.addEventListener('page:close', this.closePageListener)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.correctPageMinHeight(-this.tabsOffset)\r\n    if(this.multiPage){\r\n      this.cachedKeys.push(this.$refs.tabContent.$vnode.key)\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('page:close', this.closePageListener)\r\n    this.correctPageMinHeight(this.tabsOffset)\r\n  },\r\n  watch: {\r\n    '$route': function (newRoute) {\r\n      this.activePage = newRoute.fullPath\r\n      if (!this.multiPage) {\r\n        this.pageList = [newRoute]\r\n      } else if (this.pageList.findIndex(item => item.fullPath == newRoute.fullPath) == -1) {\r\n        this.$nextTick(() => {\r\n          this.cachedKeys.push(this.$refs.tabContent.$vnode.key)\r\n        })\r\n        this.pageList.push(newRoute)\r\n      }\r\n    },\r\n    'multiPage': function (newVal) {\r\n      if (!newVal) {\r\n        this.pageList = [this.$route]\r\n        window.removeEventListener('page:close', this.closePageListener)\r\n      } else {\r\n        window.addEventListener('page:close', this.closePageListener)\r\n      }\r\n    },\r\n    tabsOffset(newVal, oldVal) {\r\n      this.correctPageMinHeight(oldVal - newVal)\r\n    }\r\n  },\r\n  methods: {\r\n    changePage (key) {\r\n      this.activePage = key\r\n      this.$router.push(key)\r\n    },\r\n    editPage (key, action) {\r\n      this[action](key) // remove\r\n    },\r\n    remove (key, next) {\r\n      if (this.pageList.length === 1) {\r\n        return this.$message.warning(this.$t('warn'))\r\n      }\r\n      let index = this.pageList.findIndex(item => item.fullPath === key)\r\n      //清除缓存\r\n      this.clearCaches = this.cachedKeys.splice(index, 1)\r\n      this.pageList.splice(index, 1)\r\n      if (next) {\r\n        this.$router.push(next)\r\n      } else if (key === this.activePage) {\r\n        index = index >= this.pageList.length ? this.pageList.length - 1 : index\r\n        this.activePage = this.pageList[index].fullPath\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    onContextmenu (e) {\r\n      const pageKey = getPageKey(e.target)\r\n      if (pageKey) {\r\n        e.preventDefault()\r\n        this.menuVisible = true\r\n      }\r\n    },\r\n    onMenuSelect (key, target) {\r\n      let pageKey = getPageKey(target)\r\n      switch (key) {\r\n        case '1': this.closeLeft(pageKey); break\r\n        case '2': this.closeRight(pageKey); break\r\n        case '3': this.closeOthers(pageKey); break\r\n        default: break\r\n      }\r\n    },\r\n    closeOthers (pageKey) {\r\n      const index = this.pageList.findIndex(item => item.fullPath === pageKey)\r\n      // 清除缓存\r\n      this.clearCaches = this.cachedKeys.filter((item, i) => i != index)\r\n      this.cachedKeys = this.cachedKeys.slice(index, index + 1)\r\n\r\n      this.pageList = this.pageList.slice(index, index + 1)\r\n      if (this.activePage != pageKey) {\r\n        this.activePage = pageKey\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    closeLeft (pageKey) {\r\n      const index = this.pageList.findIndex(item => item.fullPath === pageKey)\r\n      // 清除缓存\r\n      this.clearCaches = this.cachedKeys.filter((item, i) => i < index)\r\n      this.cachedKeys = this.cachedKeys.slice(index)\r\n\r\n      this.pageList = this.pageList.slice(index)\r\n      if (!this.pageList.find(item => item.fullPath === this.activePage)) {\r\n        this.activePage = pageKey\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    closeRight (pageKey) {\r\n      const index = this.pageList.findIndex(item => item.fullPath === pageKey)\r\n      // 清除缓存\r\n      this.clearCaches = this.cachedKeys.filter((item, i) => i > index)\r\n      this.cachedKeys = this.cachedKeys.slice(0, index+1)\r\n\r\n      this.pageList = this.pageList.slice(0, index + 1)\r\n      if (!this.pageList.find(item => item.fullPath === this.activePage)) {\r\n        this.activePage = pageKey\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    pageName(page) {\r\n      return this.$t(getI18nKey(page.matched[page.matched.length - 1].path))\r\n    },\r\n    closePageListener(event) {\r\n      const {closeRoute, nextRoute} = event.detail\r\n      const closePath = typeof closeRoute === 'string' ? closeRoute : closeRoute.path\r\n      this.remove(closePath, nextRoute)\r\n    },\r\n    ...mapMutations('setting', ['correctPageMinHeight'])\r\n  }\r\n}\r\n/**\r\n * 由于ant-design-vue组件库的TabPane组件暂不支持自定义监听器，无法直接获取到右键target所在标签页的 pagekey 。故增加此方法用于\r\n * 查询右键target所在标签页的标识 pagekey ，以用于自定义右键菜单的事件处理。\r\n * 注：TabPane组件支持自定义监听器后可去除该方法并重构 ‘自定义右键菜单的事件处理’\r\n * @param target 查询开始目标\r\n * @param depth 查询层级深度 （查找层级最多不超过3层，超过3层深度直接返回 null）\r\n * @returns {String}\r\n */\r\nfunction getPageKey (target, depth = 0) {\r\n  if (depth > 2 || !target) {\r\n    return null\r\n  }\r\n  return target.getAttribute('pagekey') || getPageKey(target.firstElementChild, ++depth)\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  .tabs-view{\r\n    margin: -16px auto 8px;\r\n    &.head.fixed{\r\n      max-width: 1400px;\r\n    }\r\n  }\r\n  .tabs-view-content{\r\n    position: relative;\r\n  }\r\n</style>\r\n"]}]}